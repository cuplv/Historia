User
Give me an example of an android application that throws the "Activity has leaked window that was originally added here" exception.
ChatGPT

The "Activity has leaked window that was originally added here" exception in Android occurs when your application leaks a Dialog or a window. This usually happens if you show a dialog in an activity but do not dismiss it before the activity is destroyed. It's a common issue when managing dialogs in the lifecycle of an activity or fragment.
Scenario Demonstrating the Exception

Let's create an example where this exception is intentionally caused by showing a ProgressDialog in an activity without dismissing it when the activity is destroyed.
MainActivity.java

java

package com.example.leakwindowdemo;

import android.app.ProgressDialog;
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private ProgressDialog progressDialog;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Showing a ProgressDialog
        progressDialog = new ProgressDialog(MainActivity.this);
        progressDialog.setMessage("Loading...");
        progressDialog.show();
        
        // Simulate some operation that finishes after the activity has been destroyed
        // In a real app, this could be a network request or a long computation
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(10000); // 10 seconds
                    progressDialog.dismiss(); // Attempt to dismiss after activity is possibly destroyed
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }
}

Explanation

In this example, MainActivity creates and shows a ProgressDialog when it is created. It then starts a background thread that sleeps for 10 seconds, simulating a long-running operation. After the sleep, it attempts to dismiss the dialog.

If you navigate away from MainActivity (causing it to be destroyed) before the background thread completes, the application will attempt to dismiss a dialog that is attached to a destroyed context, leading to the "Activity has leaked window that was originally added here" exception. This happens because the dialog is a window on the screen that the Activity context originally created, and since the activity is no longer present, the window cannot be properly managed.
Solution

To avoid this exception, ensure that any dialogs or windowed elements are dismissed in the onDestroy() method of the activity or appropriately managed with the activity's lifecycle. For the example above, a solution would be to override onDestroy() and dismiss the dialog there if it is showing:

java

@Override
protected void onDestroy() {
    super.onDestroy();
    if (progressDialog != null && progressDialog.isShowing()) {
        progressDialog.dismiss();
    }
}

This ensures that the dialog is dismissed when the activity is destroyed, preventing the window leak. For modern Android development, consider using DialogFragment or managing dialogs with lifecycle-aware components, which handle these issues more gracefully.
