Give me an example of an Activity leak in android without static fields.
ChatGPT

An Activity leak in Android can also occur without the use of static fields. One common scenario is when an Activity context is passed to a long-running thread or an anonymous inner class, and this context is held onto after the Activity has been destroyed, preventing the Activity from being garbage collected.

Here's an example demonstrating an Activity leak caused by a long-running thread. This example intentionally creates a leak by starting a thread in the Activity that runs for a long time and keeps a reference to the Activity context.
LeakActivity.java

java

package com.example.activityleakdemo;

import android.os.Bundle;
import android.app.Activity;

public class LeakActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_leak);

        // Starting a long-running thread with an inner class holding a reference to the Activity
        new Thread(new Runnable() {
            @Override
            public void run() {
                // Simulate long-running task
                try {
                    Thread.sleep(100000); // Sleep for 100 seconds
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }
}

Explanation

    Leak Cause: The anonymous Runnable class inside the thread has an implicit reference to the enclosing Activity class (LeakActivity). Since the thread is running for a long time (100 seconds in this example), it keeps the Activity instance alive even if the user navigates away or the system tries to destroy it.

    Why It's Bad: This pattern can lead to significant memory leaks, especially if the Activity is heavy with many views or holds onto large amounts of data. The garbage collector cannot reclaim the memory allocated to the Activity until the thread completes, which could lead to OutOfMemoryError if the user navigates back and forth between activities, creating multiple instances.

    Solution: To avoid such leaks, use a static inner class or a separate class for long-running tasks and manage references to the Activity carefully. If you need to access the Activity from the task, consider using a WeakReference to the Activity. This allows the garbage collector to reclaim the Activity memory if it's no longer needed, even if the task is still running:

java

package com.example.activityleakdemo;

import android.app.Activity;
import android.os.Bundle;
import java.lang.ref.WeakReference;

public class LeakActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_leak);

        new Thread(new MyRunnable(this)).start();
    }

    private static class MyRunnable implements Runnable {
        private WeakReference<Activity> activityReference;

        MyRunnable(Activity context) {
            this.activityReference = new WeakReference<>(context);
        }

        @Override
        public void run() {
            // Simulate long-running task
            try {
                Thread.sleep(100000); // Sleep for 100 seconds
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            
            // Safely check if activity is still there
            Activity activity = activityReference.get();
            if (activity != null) {
                // Do something with the activity
            }
        }
    }
}

This corrected version uses a WeakReference to hold the Activity context, which does not prevent garbage collection of the Activity when it's no longer needed or in use.
